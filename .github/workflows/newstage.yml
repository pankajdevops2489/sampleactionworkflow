# STAGE
name: stage environemnt new strategy

on:
  pull_request_review:
    types: [submitted]
permissions:
  contents: write

env:
  REGISTRY: artifactory-mb.harman.com:5036
  BITBUCKET_PROJECT: SPACE  
  REPO_NAME: environment-configuration-space
  TO_BRANCH: master

jobs:
  build-and-test:
    name: Checkout code from PR
    if: github.event.review.state == 'approved' && github.event.pull_request.base.ref == 'release' && github.event.pull_request.head.ref == 'dev'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: 'release'

      - name: List files in the release branch
        run: |
          echo "Listing files in release branch"
          ls
          
      - name: Configure Git 
        run: | 
          git config --global user.name "github-actions[bot]" 
          git config --global user.email "github-actions[bot]@users.noreply.github.com" 

      - name: Install GitHub CLI
        run: |
          sudo apt-get install -y gh

      - name: Fetch PR commits using gh CLI
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          # Fetch the PR's head branch commits
          gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json commits --jq '.commits[] | "\(.oid)"' > commits.txt
          cat commits.txt

      - name: Fetch the PR's head branch
        run: |
          git fetch origin ${{ github.event.pull_request.head.ref }}:$GITHUB_HEAD_REF

      - name: Cherry Pick PR commits in order
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          while IFS= read -r commit; do
            echo "Cherry-picking commit: $commit"
            git cherry-pick $commit || git cherry-pick --abort
          done < commits.txt
          
      - name: List files after cherry-pick
        run: |
          echo "Listing files after cherry-pick"
          ls

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
         node-version: '16'
         cache: yarn

      - name: Install dependencies
        run: yarn install
   
      - name: Build Source
        run: yarn build
            
      - name: Run Lint
        run: yarn run lint:check

      - name: Run Unit Test
        run: yarn run test:coverage

  build-push-docker-image:
      runs-on: sdvtc-runner
      needs: build-and-test
      outputs:
        IMAGE_TAG: ${{ steps.imagetag.outputs.IMAGE_TAG }}
      
      steps:

      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: 'release'

      - name: List files in the release branch
        run: |
          echo "Listing files in release branch"
          ls
          
      - name: Configure Git 
        run: | 
          git config --global user.name "github-actions[bot]" 
          git config --global user.email "github-actions[bot]@users.noreply.github.com" 

      - name: Install GitHub CLI
        run: |
          sudo apt-get install -y gh

      - name: Fetch PR commits using gh CLI
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          # Fetch the PR's head branch commits
          gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json commits --jq '.commits[] | "\(.oid)"' > commits.txt
          cat commits.txt

      - name: Fetch the PR's head branch
        run: |
          git fetch origin ${{ github.event.pull_request.head.ref }}:$GITHUB_HEAD_REF

      - name: Cherry Pick PR commits in order
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          while IFS= read -r commit; do
            echo "Cherry-picking commit: $commit"
            git cherry-pick $commit || git cherry-pick --abort
          done < commits.txt
          
      - name: List files after cherry-pick
        run: |
          echo "Listing files after cherry-pick"
          ls

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build Image Tag
        id: imagetag
        run: |
          IMAGE_TAG=$(date +'%Y%m%d')_stage_${{ github.run_number}}
          echo ${IMAGE_TAG}
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build Docker Image and push to Registry
        run: |
          docker build . -f build/dockerfiles/Dockerfile -t ${{env.REGISTRY}}/eclipse-che/che-dashboard:${{steps.imagetag.outputs.IMAGE_TAG}}
          docker image push ${{env.REGISTRY}}/eclipse-che/che-dashboard:${{steps.imagetag.outputs.IMAGE_TAG}}
          #docker image push ${{env.REGISTRY}}/eclipse-che/che-dashboard:latest
          docker rmi -f ${{env.REGISTRY}}/eclipse-che/che-dashboard:${{steps.imagetag.outputs.IMAGE_TAG}}
          #docker rmi -f ${REGISTRY}/eclipse-che/che-dashboard:latest
          docker logout    


  deploy_to_stage:
    runs-on: sdvtc-runner
    needs: [build-and-test, build-push-docker-image]
    # environment: staging
    env:
      IMAGE_TAG: ${{ needs.build-push-docker-image.outputs.IMAGE_TAG }}
      JENKINS_URL: 'https://jenkins-space.nh.ad.harman.com'
      JOB_PATH: 'job/Prod_EU_Installation_HCTL_8_20240307_SNAPSHOT/job/Configure_Gitops_Repositories'
      HCTL_VERSION: '5.4.0-master-38ab88c'
      TARGET_REPOSITORY_BRANCH: 'master'
      APPLICATION_NAME: '*'
      UPDATE_ENVIRONMENT_CONFIGURATION: 'on'
      EXPECTED_K8S_VERSION: '1.28'
      CRUMB: ''
    steps:
      - name: Clone Bitbucket repository
        env:
          BITBUCKET_TOKEN: ${{ secrets.BITBUCKET_TOKEN }}
        run: |
          rm -rf ${REPO_NAME}
          git -c http.extraHeader="Authorization: Bearer ${BITBUCKET_TOKEN}" clone --branch ${TO_BRANCH} https://bitbucket.harman.com/scm/${BITBUCKET_PROJECT}/${REPO_NAME}.git
      - name: Update eclipse-che-cluster.yaml
        run: |
          cd ${REPO_NAME}/envs/eks-stage-frankfurt/spec/apps/ready-develop-app/values/overrides
          sed -i "s/\(dashboard:.*:\).*/\1${IMAGE_TAG}\"/" eclipse-che-cluster.yaml
          cat eclipse-che-cluster.yaml
      - name: Commit and push changes
        env:
          BITBUCKET_TOKEN: ${{ secrets.BITBUCKET_TOKEN }}
        run: |
          cd "${REPO_NAME}"
          git add .
          git commit -m "updated docker image ${IMAGE_TAG} yaml of che-dashboard"
          git -c "http.extraHeader=Authorization: Bearer ${BITBUCKET_TOKEN}" push origin ${TO_BRANCH}
      - name: Set up Jenkins credentials
        id: setup_jenkins
        run: |
          echo "JENKINS_USERNAME=${{ secrets.HCTL_JENKINS_USERNAME }}" >> $GITHUB_ENV
          echo "JENKINS_PASSWORD=${{ secrets.HCTL_JENKINS_TOKEN }}" >> $GITHUB_ENV
      - name: Generate Jenkins crumb
        id: generate_crumb
        run: |
          crumb_response=$(curl -s $JENKINS_URL/crumbIssuer/api/json -u $JENKINS_USERNAME:$JENKINS_PASSWORD)
          crumb=$(echo "$crumb_response" | jq -r '.crumb')
          echo "CRUMB=$crumb" >> $GITHUB_ENV
      - name: Trigger Jenkins pipeline
        run:  |
          json_payload=$(jq -n \
            --arg env_name "eks-stage-frankfurt" \
            --arg hctl_version "$HCTL_VERSION" \
            --arg target_branch "$TARGET_REPOSITORY_BRANCH" \
            --arg app_name "$APPLICATION_NAME" \
            --argjson update_config "$([[ $UPDATE_ENVIRONMENT_CONFIGURATION == "on" ]] && echo true || echo false)" \
            --arg k8s_version "$EXPECTED_K8S_VERSION" \
            --arg crumb "$CRUMB" \
            '{parameter: [
              {name: "ENV_NAME", value: $env_name},
              {name: "HCTL_VERSION", value: $hctl_version},
              {name: "TARGET_REPOSITORY_BRANCH", value: $target_branch},
              {name: "APPLICATION_NAME", value: $app_name},
              {name: "UPDATE_ENVIRONMENT_CONFIGURATION", value: $update_config},
              {name: "EXPECTED_K8S_VERSION", value: $k8s_version}
            ], statusCode: "303", redirectTo: ".", "Jenkins-Crumb": $crumb}' | jq -c .)
      
          curl -X POST "$JENKINS_URL/$JOB_PATH/build?delay=0sec" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "ENV_NAME=${{ github.event.inputs.ENV_NAME }}" \
            --data-urlencode "HCTL_VERSION=$HCTL_VERSION" \
            --data-urlencode "TARGET_REPOSITORY_BRANCH=$TARGET_REPOSITORY_BRANCH" \
            --data-urlencode "APPLICATION_NAME=$APPLICATION_NAME" \
            --data-urlencode "UPDATE_ENVIRONMENT_CONFIGURATION=$UPDATE_ENVIRONMENT_CONFIGURATION" \
            --data-urlencode "EXPECTED_K8S_VERSION=$EXPECTED_K8S_VERSION" \
            --data-urlencode "statusCode=303" \
            --data-urlencode "redirectTo=." \
            --data-urlencode "Jenkins-Crumb=$CRUMB" \
            --data-urlencode "json=$json_payload" \
            --user "$JENKINS_USERNAME:$JENKINS_PASSWORD"

          sleep 240
